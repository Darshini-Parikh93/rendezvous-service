// Copyright 2019 Intel Corporation
// SPDX-License-Identifier: Apache 2.0

package org.sdo.rendezvous.utils;

import javax.xml.bind.DatatypeConverter;
import org.mockito.MockitoAnnotations;
import org.sdo.rendezvous.exceptions.InvalidCertException;
import org.sdo.rendezvous.model.types.Cert;
import org.testng.Assert;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

public class CertUtilsTest {

  private static final int certLenght = 780;

  private static final byte[] cert_bytes =
      DatatypeConverter.parseHexBinary(
          "308203083082028EA003020102021455A618E1E96BD2F7D52A2E82616B0B582575F3B0300A06082A8648C"
              + "E3D040303308183310B3009060355040613025553310B300906035504080C02434131143012060355"
              + "04070C0B53616E746120436C617261311A3018060355040A0C11496E74656C20436F72706F7261746"
              + "96F6E311D301B060355040B0C14494F542043414B2049737375696E67204341203031163014060355"
              + "04030C0D7777772E696E74656C2E636F6D301E170D3138313031363130333130335A170D323830383"
              + "2343130333130335A301D311B301906035504030C12496F542043414B207669643A30444444414130"
              + "76301006072A8648CE3D020106052B81040022036200049C284CA00C258B8EDC8698021906C2DFD67"
              + "E879B6FAD25433AA278204A44FBB96F749D754DEC9AF13AC6FCDE6D8C5FFC12A233B7995CB100277D"
              + "6800ED9A6018143BCF2473A59A5A7072E37788406AA5346D6B05A19E4DC210FC38966D65D264A3820"
              + "12630820122306E06082B0601050507010104623060305E06082B0601050507300286526874747073"
              + "3A2F2F7472757374656473657276696365732E696E74656C2E636F6D2F636F6E74656E742F494F542"
              + "F63657274732F494F545F43414B5F526F6F7443415F43657274696669636174652E636572301F0603"
              + "551D2304183016801464CB77BA05F00ADF9078E372F113F682D5F8932630120603551D130101FF040"
              + "830060101FF020100304F0603551D1F044830463044A042A040863E68747470733A2F2F7472757374"
              + "656473657276696365732E696E74656C2E636F6D2F636F6E74656E742F494F542F63726C732F494F5"
              + "45F43414B2E63726C300B0603551D0F040403020186301D0603551D0E04160414D0AE387801E37F39"
              + "C58B269FC0D9A93C261DC4D7300A06082A8648CE3D0403030368003065023100C5E49B2DACC319F9B"
              + "611064DA664DFE22C0B09AA52A87832A085F5838B9B7509E68FEAD4B138A3C6AD069BA93BD5622D02"
              + "30706EE835F1E8D2533E728E63970300C3650D9C6AD524E1970CDC6DB5B858E0187541CCB1246A921"
              + "768281C5B4095F243");

  private static final byte[] expectedKey =
      DatatypeConverter.parseHexBinary(
          "3076301006072A8648CE3D020106052B81040022036200049C284CA00C258B8EDC8698021906C2DFD67E8"
              + "79B6FAD25433AA278204A44FBB96F749D754DEC9AF13AC6FCDE6D8C5FFC12A233B7995CB100277D68"
              + "00ED9A6018143BCF2473A59A5A7072E37788406AA5346D6B05A19E4DC210FC38966D65D264");

  private CertUtils certUtils = new CertUtils();

  @BeforeMethod
  public void setUp() {
    MockitoAnnotations.initMocks(this);
  }

  @Test
  public void testGetEcdsaPubKeyFromCert() throws Exception {
    Cert cert = new Cert(certLenght, cert_bytes);
    byte[] receivedKey = certUtils.getPubKeyBytesFromCert(cert);
    Assert.assertEquals(receivedKey, expectedKey);
  }

  @Test(expectedExceptions = InvalidCertException.class)
  public void testGetPubKeyFromBytesNegative() throws Exception {
    byte[] invalidCertBytes = cert_bytes;
    invalidCertBytes[44] = (byte) 0;
    Cert cert = new Cert(certLenght, invalidCertBytes);
    certUtils.getPubKeyBytesFromCert(cert);
  }
}
